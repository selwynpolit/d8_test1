<?php

/**
 * @file
 * Contains \Drupal\wfm_migrate_recipe\Plugin\migrate\source\WfmMigrateRecipe.
 */

namespace Drupal\wfm_migrate_recipe\Plugin\migrate\source;

use Drupal\migrate\Row;
use Wfm\Api\SageClient\Recipe;
use Drupal\migrate\Plugin\migrate\source\SourcePluginBase;

// The config should be stored in settings.php, or outside of docroot
require('config.php');

/**
 * Source plugin for WFM Recipe content.
 *
 * @MigrateSource(
 *   id = "wfm_migrate_recipe"
 * )
 */
class WfmMigrateRecipe extends SourcePluginBase {

  protected function initializeIterator() {
    $apiRecipe = new Recipe(API_KEY, API_SECRET, API_URL);
    // using getAllRecipes is the easiest, but might need to use getAllRecipeIds
    // or possibly recipeIterator
    $apiRecipe->setLimit(5);
    //$rows = $apiRecipe->getAllRecipes();
    $rows = $apiRecipe->getRecipesModifiedSince(strtotime('-1 month'));
    // $rows must be an array or Traversable which yields arrays. That's all!
    $it = new \ArrayIterator($rows);


    return $it;
  }

  // We need these functions because we are extending an abstract class
  public function getIds() {
    return array(
      '_id' => array(
        // Should be 'string' if the IDs are strings
        'type' => 'string',
      ),
    );
  }

  public function fields() {
    return array(
      //'id' => t('ID'),
      //'_id' => t('_ID'),
      //'title' => t('title'),
      'id' => 'ID number for each recipe',
      '_id' => 'Mongo ID for each recipe',
      'title' => 'Title of recipe',
      'modified_at' => 'Datetime recipe was last modified',
      'modified_at2' => 'Datetime recipe was last modified',
      'description' => 'Description',
      'comment_count' => 'Number of comments',
      'number_of_ratings' => 'Number of ratings',
      'created_at' => 'Created',
      'rating' => 'Rating',
      'weighted_rating' => 'Weighted Rating',
      'prep_time' => 'Preparation time',
      'cook_time' => 'Cooking time',
      'serves' => 'Serves',
      'ingredients' => 'Ingredients',
      'directions' => 'Directions',
      'photos' => 'Photographs',
      'special_diet' => 'Special Diet Flag',
      'type_dish' => 'Type of dish',
      'cuisine' => 'Cuisine',
      'occasion' => 'Occasion',
      'category' => 'Category',
      'categories' => 'Categories',
      'main_ingredient' => 'Main Ingredient in dish',
      'cloudinary_images' => 'Cloudinary Images',
      'image_filename' => 'Image Filename',
      'field_hero_image' => 'Main image for the recipe',
      'image_alt_text' => 'Image title text',
      'image_title_text' => 'Image title text',


    );
  }

  public function __toString() {
    return (string) $this->query;
  }

  public function prepareRow(Row $row) {
    // do my row mods here..

    // e.g.
    $temp_title = $row->getSourceProperty("title");
    $row->setSourceProperty("title", strtoupper($temp_title));

    return parent::prepareRow($row); // TODO: Change the autogenerated stub


  }

}
